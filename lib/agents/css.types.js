'use strict';
// This file is auto-generated using scripts/doc-sync.js

/**
 */
exports.StyleSheetId = String;

/**
 * This object identifies a CSS style in a unique way.
 * 
 * @param {StyleSheetId} styleSheetId Enclosing stylesheet identifier.
 * @param {integer} ordinal The style ordinal within the stylesheet.
 */
exports.CSSStyleId =
function CSSStyleId(props) {
  this.styleSheetId = props.styleSheetId;
  this.ordinal = props.ordinal;
};

/**
 * Stylesheet type: "user" for user stylesheets, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e.
 * those holding the "via inspector" rules), "regular" for regular stylesheets.
 */
exports.StyleSheetOrigin = String;

/**
 * This object identifies a CSS rule in a unique way.
 * 
 * @param {StyleSheetId} styleSheetId Enclosing stylesheet identifier.
 * @param {integer} ordinal The rule ordinal within the stylesheet.
 */
exports.CSSRuleId =
function CSSRuleId(props) {
  this.styleSheetId = props.styleSheetId;
  this.ordinal = props.ordinal;
};

/**
 * CSS rule collection for a single pseudo style.
 * 
 * @param {integer} pseudoId Pseudo style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>).
 * @param {Array.<RuleMatch>} matches Matches of CSS rules applicable to the pseudo style.
 */
exports.PseudoIdMatches =
function PseudoIdMatches(props) {
  this.pseudoId = props.pseudoId;
  this.matches = props.matches;
};

/**
 * CSS rule collection for a single pseudo style.
 * 
 * @param {CSSStyle=} inlineStyle The ancestor node's inline style, if any, in the style inheritance chain.
 * @param {Array.<RuleMatch>} matchedCSSRules Matches of CSS rules matching the ancestor node in the style inheritance chain.
 */
exports.InheritedStyleEntry =
function InheritedStyleEntry(props) {
  this.inlineStyle = props.inlineStyle;
  this.matchedCSSRules = props.matchedCSSRules;
};

/**
 * Match data for a CSS rule.
 * 
 * @param {CSSRule} rule CSS rule in the match.
 * @param {Array.<integer>} matchingSelectors Matching selector indices in the rule's selectorList selectors (0-based).
 */
exports.RuleMatch =
function RuleMatch(props) {
  this.rule = props.rule;
  this.matchingSelectors = props.matchingSelectors;
};

/**
 * Selector list data.
 * 
 * @param {Array.<string>} selectors Selectors in the list.
 * @param {string} text Rule selector text.
 * @param {SourceRange=} range Rule selector range in the underlying resource (if available).
 */
exports.SelectorList =
function SelectorList(props) {
  this.selectors = props.selectors;
  this.text = props.text;
  this.range = props.range;
};

/**
 * CSS style information for a DOM style attribute.
 * 
 * @param {string} name DOM attribute name (e.g. "width").
 * @param {CSSStyle} style CSS style generated by the respective DOM attribute.
 */
exports.CSSStyleAttribute =
function CSSStyleAttribute(props) {
  this.name = props.name;
  this.style = props.style;
};

/**
 * CSS stylesheet metainformation.
 * 
 * @param {StyleSheetId} styleSheetId The stylesheet identifier.
 * @param {Page.FrameId} frameId Owner frame identifier.
 * @param {string} sourceURL Stylesheet resource URL.
 * @param {string=} sourceMapURL URL of source map associated with the stylesheet (if any).
 * @param {StyleSheetOrigin} origin Stylesheet origin.
 * @param {string} title Stylesheet title.
 * @param {boolean} disabled Denotes whether the stylesheet is disabled.
 * @param {boolean=} hasSourceURL Whether the sourceURL field value comes from the sourceURL comment.
 * @param {boolean} isInline Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags.
 * @param {number} startLine Line offset of the stylesheet within the resource (zero based).
 * @param {number} startColumn Column offset of the stylesheet within the resource (zero based).
 */
exports.CSSStyleSheetHeader =
function CSSStyleSheetHeader(props) {
  this.styleSheetId = props.styleSheetId;
  this.frameId = props.frameId;
  this.sourceURL = props.sourceURL;
  this.sourceMapURL = props.sourceMapURL;
  this.origin = props.origin;
  this.title = props.title;
  this.disabled = props.disabled;
  this.hasSourceURL = props.hasSourceURL;
  this.isInline = props.isInline;
  this.startLine = props.startLine;
  this.startColumn = props.startColumn;
};

/**
 * CSS stylesheet contents.
 * 
 * @param {StyleSheetId} styleSheetId The stylesheet identifier.
 * @param {Array.<CSSRule>} rules Stylesheet resource URL.
 * @param {string=} text Stylesheet resource contents (if available).
 */
exports.CSSStyleSheetBody =
function CSSStyleSheetBody(props) {
  this.styleSheetId = props.styleSheetId;
  this.rules = props.rules;
  this.text = props.text;
};

/**
 * CSS rule representation.
 * 
 * @param {CSSRuleId=} ruleId The CSS rule identifier (absent for user agent stylesheet and user-specified stylesheet rules).
 * @param {SelectorList} selectorList Rule selector data.
 * @param {string=} sourceURL Parent stylesheet resource URL (for regular rules).
 * @param {StyleSheetOrigin} origin Parent stylesheet's origin.
 * @param {CSSStyle} style Associated style declaration.
 * @param {Array.<CSSMedia>=} media Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards.
 */
exports.CSSRule =
function CSSRule(props) {
  this.ruleId = props.ruleId;
  this.selectorList = props.selectorList;
  this.sourceURL = props.sourceURL;
  this.origin = props.origin;
  this.style = props.style;
  this.media = props.media;
};

/**
 * Text range within a resource.
 * All numbers are zero-based.
 * 
 * @param {integer} startLine Start line of range.
 * @param {integer} startColumn Start column of range (inclusive).
 * @param {integer} endLine End line of range
 * @param {integer} endColumn End column of range (exclusive).
 */
exports.SourceRange =
function SourceRange(props) {
  this.startLine = props.startLine;
  this.startColumn = props.startColumn;
  this.endLine = props.endLine;
  this.endColumn = props.endColumn;
};

/**
 * 
 * @param {string} name Shorthand name.
 * @param {string} value Shorthand value.
 */
exports.ShorthandEntry =
function ShorthandEntry(props) {
  this.name = props.name;
  this.value = props.value;
};

/**
 * 
 * @param {string} name Property name.
 * @param {Array.<string>=} longhands Longhand property names.
 */
exports.CSSPropertyInfo =
function CSSPropertyInfo(props) {
  this.name = props.name;
  this.longhands = props.longhands;
};

/**
 * 
 * @param {string} name Computed style property name.
 * @param {string} value Computed style property value.
 */
exports.CSSComputedStyleProperty =
function CSSComputedStyleProperty(props) {
  this.name = props.name;
  this.value = props.value;
};

/**
 * CSS style representation.
 * 
 * @param {CSSStyleId=} styleId The CSS style identifier (absent for attribute styles).
 * @param {Array.<CSSProperty>} cssProperties CSS properties in the style.
 * @param {Array.<ShorthandEntry>} shorthandEntries Computed values for all shorthands found in the style.
 * @param {string=} cssText Style declaration text (if available).
 * @param {SourceRange=} range Style declaration range in the enclosing stylesheet (if available).
 * @param {string=} width The effective "width" property value from this style.
 * @param {string=} height The effective "height" property value from this style.
 */
exports.CSSStyle =
function CSSStyle(props) {
  this.styleId = props.styleId;
  this.cssProperties = props.cssProperties;
  this.shorthandEntries = props.shorthandEntries;
  this.cssText = props.cssText;
  this.range = props.range;
  this.width = props.width;
  this.height = props.height;
};

/**
 * CSS property declaration data.
 * 
 * @param {string} name The property name.
 * @param {string} value The property value.
 * @param {string=} priority The property priority (implies "" if absent).
 * @param {boolean=} implicit Whether the property is implicit (implies <code>false</code> if absent).
 * @param {string=} text The full property text as specified in the style.
 * @param {boolean=} parsedOk Whether the property is understood by the browser (implies <code>true</code> if absent).
 * @param {string active|inactive|disabled|style=} status The property status: "active" if the property is effective in the style, "inactive" if the property is overridden by a same-named property in this style later on, "disabled" if the property is disabled by the user, "style" (implied if absent) if the property is reported by the browser rather than by the CSS source parser.
 * @param {SourceRange=} range The entire property range in the enclosing style declaration (if available).
 */
exports.CSSProperty =
function CSSProperty(props) {
  this.name = props.name;
  this.value = props.value;
  this.priority = props.priority;
  this.implicit = props.implicit;
  this.text = props.text;
  this.parsedOk = props.parsedOk;
  this.status = props.status;
  this.range = props.range;
};

/**
 * CSS media query descriptor.
 * 
 * @param {string} text Media query text.
 * @param {string mediaRule|importRule|linkedSheet|inlineSheet} source Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet's STYLE tag.
 * @param {string=} sourceURL URL of the document containing the media query description.
 * @param {SourceRange=} range The associated rule (@media or @import) header range in the enclosing stylesheet (if available).
 * @param {StyleSheetId=} parentStyleSheetId Identifier of the stylesheet containing this object (if exists).
 */
exports.CSSMedia =
function CSSMedia(props) {
  this.text = props.text;
  this.source = props.source;
  this.sourceURL = props.sourceURL;
  this.range = props.range;
  this.parentStyleSheetId = props.parentStyleSheetId;
};

/**
 * CSS selector profile entry.
 * 
 * @param {string} selector CSS selector of the corresponding rule.
 * @param {string} url URL of the resource containing the corresponding rule.
 * @param {integer} lineNumber Selector line number in the resource for the corresponding rule.
 * @param {number} time Total time this rule handling contributed to the browser running time during profiling (in milliseconds).
 * @param {integer} hitCount Number of times this rule was considered a candidate for matching against DOM elements.
 * @param {integer} matchCount Number of times this rule actually matched a DOM element.
 */
exports.SelectorProfileEntry =
function SelectorProfileEntry(props) {
  this.selector = props.selector;
  this.url = props.url;
  this.lineNumber = props.lineNumber;
  this.time = props.time;
  this.hitCount = props.hitCount;
  this.matchCount = props.matchCount;
};

/**
 * 
 * @param {number} totalTime Total processing time for all selectors in the profile (in milliseconds).
 * @param {Array.<SelectorProfileEntry>} data CSS selector profile entries.
 */
exports.SelectorProfile =
function SelectorProfile(props) {
  this.totalTime = props.totalTime;
  this.data = props.data;
};

/**
 * This object represents a region that flows from a Named Flow.
 * 
 * @param {string overset|fit|empty} regionOverset The "overset" attribute of a Named Flow.
 * @param {DOM.NodeId} nodeId The corresponding DOM node id.
 */
exports.Region =
function Region(props) {
  this.regionOverset = props.regionOverset;
  this.nodeId = props.nodeId;
};

/**
 * This object represents a Named Flow.
 * 
 * @param {DOM.NodeId} documentNodeId The document node id.
 * @param {string} name Named Flow identifier.
 * @param {boolean} overset The "overset" attribute of a Named Flow.
 * @param {Array.<DOM.NodeId>} content An array of nodes that flow into the Named Flow.
 * @param {Array.<Region>} regions An array of regions associated with the Named Flow.
 */
exports.NamedFlow =
function NamedFlow(props) {
  this.documentNodeId = props.documentNodeId;
  this.name = props.name;
  this.overset = props.overset;
  this.content = props.content;
  this.regions = props.regions;
};

/**
 * Information about amount of glyphs that were rendered with given font.
 * 
 * @param {string} familyName Font's family name reported by platform.
 * @param {number} glyphCount Amount of glyphs that were rendered with this font.
 */
exports.PlatformFontUsage =
function PlatformFontUsage(props) {
  this.familyName = props.familyName;
  this.glyphCount = props.glyphCount;
};
