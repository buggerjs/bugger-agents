'use strict';

var util = require('util');

var _ = require('lodash');

var BaseAgent = require('./base');

function InputAgent(client) {
  if (!(this instanceof InputAgent))
    return new InputAgent(client);

  BaseAgent.call(this, InputAgent, client);
}
util.inherits(InputAgent, BaseAgent);
_.extend(InputAgent, require('./input.types'));
module.exports = InputAgent;

/**
 * Dispatches a key event to the page.
 * 
 * @param {string keyDown|keyUp|rawKeyDown|char} type Type of the key event.
 * @param {integer=} modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
 * @param {number=} timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
 * @param {string=} text Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "")
 * @param {string=} unmodifiedText Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
 * @param {string=} keyIdentifier Unique key identifier (e.g., 'U+0041') (default: "").
 * @param {integer=} windowsVirtualKeyCode Windows virtual key code (default: 0).
 * @param {integer=} nativeVirtualKeyCode Native virtual key code (default: 0).
 * @param {boolean=} autoRepeat Whether the event was generated from auto repeat (default: false).
 * @param {boolean=} isKeypad Whether the event was generated from the keypad (default: false).
 * @param {boolean=} isSystemKey Whether the event was a system key event (default: false).
 */
InputAgent.prototype.dispatchKeyEvent = function() {
  return this._withClient(function() {
    throw new Error('Not implemented');
  });
};

/**
 * Dispatches a mouse event to the page.
 * 
 * @param {string mousePressed|mouseReleased|mouseMoved} type Type of the mouse event.
 * @param {integer} x X coordinate of the event relative to the main frame's viewport.
 * @param {integer} y Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
 * @param {integer=} modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
 * @param {number=} timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
 * @param {string none|left|middle|right=} button Mouse button (default: "none").
 * @param {integer=} clickCount Number of times the mouse button was clicked (default: 0).
 * @param {boolean=} deviceSpace If true, x and y are given in dip wrt current viewport.
 */
InputAgent.prototype.dispatchMouseEvent = function() {
  return this._withClient(function() {
    throw new Error('Not implemented');
  });
};

/**
 * Dispatches a touch event to the page.
 * 
 * @param {string touchStart|touchEnd|touchMove} type Type of the touch event.
 * @param {Array.<TouchPoint>} touchPoints Touch points.
 * @param {integer=} modifiers Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
 * @param {number=} timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
 */
InputAgent.prototype.dispatchTouchEvent = function() {
  return this._withClient(function() {
    throw new Error('Not implemented');
  });
};

/**
 * Dispatches a gesture event to the page.
 * 
 * @param {string scrollBegin|scrollEnd|scrollUpdate|tapDown|tap|pinchBegin|pinchEnd|pinchUpdate} type Type of the gesture event.
 * @param {integer} x X coordinate relative to the screen's viewport.
 * @param {integer} y Y coordinate relative to the screen's viewport.
 * @param {number=} timestamp Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
 * @param {integer=} deltaX Delta X where apllies.
 * @param {integer=} deltaY Delta Y where apllies.
 * @param {number=} pinchScale Pinch scale.
 */
InputAgent.prototype.dispatchGestureEvent = function() {
  return this._withClient(function() {
    throw new Error('Not implemented');
  });
};
